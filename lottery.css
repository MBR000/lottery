*{
    margin:0;
    padding:0;
}

body{
    display: flex;
    justify-content: space-around;
    align-items: center;
    height:100vh;
    background-image: linear-gradient(200deg,#5ee7df,#b490ca);
    perspective: 2000px;
}

.card{
    position: relative;
    width: 300px;
    height: 450px;
    border-radius: 30px;
    cursor: pointer;
    background-color: #fff;
    /* 盒子阴影 */
    box-shadow: 1px 1px 20px rgba(0,0,0,0.1);
    /* 给父元素添加一个3D盒子属性，那么子元素就到背面了，这个属性是加到父元素上的，但是影响的是子元素 */
    transform-style: preserve-3d;

    animation: rotate-reverse 1.2s cubic-bezier(0.66,-0.47,0.33,1.5) forwards;
}

.card:hover{
    /* 动画（名称 时长 第三个属性是贝塞尔曲线，我们可以自定义动画的运动轨迹，让动画的运动轨迹有了很多种可能 第四个属性是当我们的动画完成时的状态，一般动画完成之后就回到了0%的状态，默认值是backwards，当我们给的属性值是forwards时，那么动画到100%的时候就会停下来，不会回到0%） */
    animation: rotate 1.2s cubic-bezier(0.66,-0.47,0.33,1.5) forwards;
}

.front,.back{
    position:absolute;
    top: 0;
    left: 0;
    width:100%;
    height:100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-around;
    background-color: #fff;
    border-radius: 30px;
    backface-visibility: hidden; 
}

.back{
    transform: rotateY(180deg);
}

img{
    width: 40%;
}

span{
    font-weight: bold;
    font-size: 80px;
}

/* 接下来我们定义一下旋转动画 */
@keyframes rotate{
    0%{
        transform: rotateY(0deg);
    }
    100%{
        transform: rotateY(180deg);
    }
}
@keyframes rotate-reverse{
    0%{
        transform: rotateY(180deg);
    }
    100%{
        transform: rotateY(0deg);
    }
}